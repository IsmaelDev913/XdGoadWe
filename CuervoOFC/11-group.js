const groupHandler = async ({ bot, reply, args, m }) => {
  const jid = m.key.remoteJid;
  // Traducci√≥n a ruso // Russian translation
  if (!jid) return reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π JID (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ).");
  await bot.sendMessage(jid, { react: { text: "‚è±Ô∏è", key: m.key } });
  try {
  const metadata = await bot.groupMetadata(jid).catch(() => null);
  if (!metadata) {
  return await reply("> ‚ùå –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
  }
  const sender = m?.key?.participant || m?.key?.remoteJid || '';
  const admins = metadata.participants.filter(p => p.admin).map(p => p.id);
  const isAdmin = admins.includes(sender);
  if (!isAdmin) {
  return await reply("> ‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.");
  }
  const action = (args[0] || "").toLowerCase();
  if (action === "–æ—Ç–∫—Ä—ã—Ç–∞—è") {
  await bot.groupSettingUpdate(jid, "not_announcement");
  await reply("> üîì –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ *–æ—Ç–∫—Ä—ã—Ç–∞—è*.");
  } else if (action === "–∑–∞–∫—Ä—ã—Ç–∞—è") {
  await bot.groupSettingUpdate(jid, "announcement");
  await reply("> üîí –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ *–∑–∞–∫—Ä—ã—Ç–∞—è*.");
  } else {
  await reply(">‚ùó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n.–≥—Ä—É–ø–ø–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è\n.–≥—Ä—É–ø–ø–∞ –∑–∞–∫—Ä—ã—Ç–∞—è");
  }
  } catch (e) {
  console.error("Error en /group:", e);
  await reply("> ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.");
  }

}
export default groupHandler
